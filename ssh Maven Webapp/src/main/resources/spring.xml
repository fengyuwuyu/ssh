<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="default"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<context:component-scan base-package="com.ll.ssh"></context:component-scan>
	

	<!-- 引入数据库属性文件 -->
	<context:property-placeholder location="classpath:config.properties" />	
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${driverClassName}"></property>
		<property name="url" value="${jdbc_url}"></property>
		<property name="username" value="${jdbc_username}"></property>
		<property name="password" value="${jdbc_password}"></property>
		<property name="initialSize" value="${initialSize}"></property>
		<property name="maxActive" value="${maxActive}"></property>
		<property name="minIdle" value="${minIdle}"></property>
		
		<property name="maxWait" value="${maxWait}"></property>
		<property name="validationQuery" value="${validationQuery}"></property>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- <property name="configLocation" value="classpath:hibernate.cfg.xml"></property> -->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="mappingLocations" value="classpath:com/ll/ssh/model/*.hbm.xml"></property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sqlSessionFactory"></property>
	</bean>

	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" />
			<tx:method name="get*" read-only="true"/>
			<tx:method name="select*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* com.ll.ssh.service..*.*(..))" id="txPointcut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	<!-- <bean id="loginAction" class="com.ll.ssh.service.impl.LoginServiceImpl"></bean> -->
	
	
	
	<!-- 使用aspectJ注解的方式配置aop -->
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	<!-- <bean id="loggingAspect" class="com.ll.ssh.spring.aop.LoggingAspect"></bean>
	
	<aop:config>execution(* com.cecep.service..*Impl.*(..))
		<aop:pointcut id="logPointCut" expression="execution(* com.ll.ssh.spring.service..*.*(..))" />
		<aop:aspect ref="loggingAspect" id="logAspect">
			<aop:after-returning method="afterReturn" pointcut-ref="logPointCut" returning="result"/>   
		</aop:aspect> 
	</aop:config> -->
</beans>